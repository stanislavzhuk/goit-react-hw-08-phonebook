{"version":3,"file":"static/js/965.5519f45d.chunk.js","mappings":"8NAAaA,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAV,EACpBC,EAAiB,SAAAF,GAAK,OAAIA,EAAMG,SAASC,KAAnB,EACtBC,EAAkB,SAAAL,GAAK,OAAIA,EAAMG,SAASG,SAAnB,EACvBC,EAAc,SAAAP,GAAK,OAAIA,EAAMG,SAASK,KAAnB,E,6BCDnBC,EAAOC,EAAAA,EAAAA,KAAH,yMAYJC,EAAQD,EAAAA,EAAAA,MAAH,uKAYLE,EAAQF,EAAAA,EAAAA,MAAH,oVAoBLG,EAASH,EAAAA,EAAAA,OAAH,mb,UC5CnBI,EAAAA,OAAAA,KAAY,CACVC,aAAc,OACdC,QAAS,IACTC,cAAc,EACdC,kBAAmB,SAGd,I,0BCyDP,EA3DoB,WAClB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,eACXtB,GAAWuB,EAAAA,EAAAA,aAAYxB,GAEvByB,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MACD,SAATV,GAAiBC,EAAQS,GAChB,WAATV,GAAmBG,EAAUO,EAClC,EAgBD,OACE,UAACrB,EAAD,CAAMsB,SAVa,SAAAH,GAEnB,GADAA,EAAEI,iBACE7B,EAAS8B,MAAK,SAAAC,GAAO,OAAIA,EAAQd,KAAKe,gBAAkBf,EAAKe,aAAxC,IAAwD,ODflD,SAAAf,GAAI,OAAIN,EAAAA,OAAAA,KAAA,UAAeM,EAAf,2BAAJ,CCeqDgB,CAAoBhB,GAE5GI,GAASa,EAAAA,EAAAA,IAAW,CAAEjB,KAAAA,EAAME,OAAAA,KDnBC,SAAAF,GAAQN,EAAAA,OAAAA,QAAA,UAAkBM,EAAlB,oDAAJ,CCoBjCkB,CAAkBlB,GATlBC,EAAQ,IACRE,EAAU,GAUX,EAGC,WACE,UAACZ,EAAD,WAAO,QAEL,SAACC,EAAD,CACE2B,KAAK,OACLnB,KAAK,OACLU,MAAOV,EACPoB,SAAUb,EACVc,QAAQ,+BACRC,MAAM,yIACNC,YAAY,qBACZC,UAAQ,QAGZ,UAACjC,EAAD,WAAO,UAEL,SAACC,EAAD,CACE2B,KAAK,MACLnB,KAAK,SACLU,MAAOR,EACPkB,SAAUb,EACVc,QAAQ,8BACRC,MAAM,+FACNC,YAAY,uBACZC,UAAQ,QAGZ,SAAC/B,EAAD,CAAQ0B,KAAK,SAAb,SAAsB,kBAG3B,EC9DYM,EAAOnC,EAAAA,EAAAA,GAAH,uRAiBJoC,EAAUpC,EAAAA,EAAAA,IAAH,kSAiBPqC,EAAOrC,EAAAA,EAAAA,EAAH,kJAQJsC,EAAQtC,EAAAA,EAAAA,EAAH,kJAQLG,EAASH,EAAAA,EAAAA,OAAH,4YCXnB,EAlCwB,WACtB,IAAMc,GAAWC,EAAAA,EAAAA,eACXtB,GAAWuB,EAAAA,EAAAA,aAAYxB,GAUvB+C,EAPe,SAAAhD,GACnB,OAAOE,EAASF,QAAO,SAAAiC,GAAO,OAC5BA,EAAQd,KAAKe,cAAce,SAASjD,EADR,GAG/B,CAGuBkD,EATTzB,EAAAA,EAAAA,aAAY3B,GAQKoC,eAG1BiB,EAAW,SAACC,GAChB7B,GAAS8B,EAAAA,EAAAA,IAAcD,IHTcvC,EAAAA,OAAAA,QAAe,gCGWrD,EAED,OAAOmC,EAAgBM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpC,KAAKsC,cAAcD,EAAErC,KAAjC,IAAwCuC,KAAI,YAA0B,IAAvBN,EAAsB,EAAtBA,GAAIjC,EAAkB,EAAlBA,KAAMwC,EAAY,EAAZA,MACnF,OACE,UAACf,EAAD,YACE,UAACC,EAAD,YACE,UAACC,EAAD,WAAO3B,EAAK,QACZ,SAAC4B,EAAD,UAAQY,QAEV,SAAC,EAAD,CAAQrB,KAAK,SAASsB,QAAS,kBAAMT,EAASC,EAAf,EAA/B,SAAmD,aAL1CA,EAUd,GACF,ECrCYS,EAAOpD,EAAAA,EAAAA,GAAH,0eCUjB,EARoB,WAClB,OACE,SAACoD,EAAD,WACE,SAAC,EAAD,KAGL,E,UCRYC,EAAcrD,EAAAA,EAAAA,MAAH,wIASXsD,EAActD,EAAAA,EAAAA,MAAH,sbCmBxB,EAxBe,WACb,IAAMc,GAAWC,EAAAA,EAAAA,eACXwC,GAAcvC,EAAAA,EAAAA,aAAY3B,GAKhC,OACE,UAACgE,EAAD,WAAa,yBAEX,SAACC,EAAD,CACEzB,KAAK,OACLnB,KAAK,SACLU,MAAOmC,EAAYhE,OACnBuC,SAXe,SAAC,GAA2B,IAAfV,EAAc,EAAxBoC,OAAUpC,MAChCN,GAAS2C,EAAAA,EAAAA,GAAarC,GACvB,EAUKW,QAAQ,+BACRC,MAAM,yIACNC,YAAY,qBACZC,UAAQ,MAIf,E,UC3BD,EAA4B,4BAA5B,EAAgE,wBAAhE,EAAwG,gCAAxG,EAAmJ,2BC4CnJ,EAnCiB,WACf,IAAMpB,GAAWC,EAAAA,EAAAA,gBAEjB2C,EAAAA,EAAAA,YAAU,WACR5C,GAAS6C,EAAAA,EAAAA,MACV,GAAE,CAAC7C,IAEJ,IAAMhB,GAAQkB,EAAAA,EAAAA,aAAYnB,GACpBJ,GAAWuB,EAAAA,EAAAA,aAAYxB,GACvBI,GAAYoB,EAAAA,EAAAA,aAAYrB,GAE9B,OACE,gBAAKiE,UAAWC,EAAhB,SACG/D,GACC,wBAAKA,KAEL,iCACE,eAAI8D,UAAWC,EAAf,SAA0B,eAC1B,SAAC,EAAD,IACCjE,IAAcE,IAAS,SAACgE,EAAA,EAAD,IACvBrE,EAASsE,QACR,iCACE,eAAIH,UAAWC,EAAf,SAAkC,cAClC,SAAC,EAAD,KACA,SAAC,EAAD,QAGF,cAAGD,UAAWC,EAAd,SAA4B,wBAMvC,C","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","services/notify.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 2;\n  grid-row-end: 4;\n  `;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  width: 100%;\n\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 1.14;\n  `;\n\nexport const Input = styled.input`\n  padding: 8px 12px;\n\n  font-size: 18px;\n  line-height: 1.12;\n  \n  border: 2px solid #a75f06;\n  border-radius: 8px;\n  outline: 2px solid transparent;\n  outline-offset: -1px;\n  background-color: #e6f4f1;\n\n  transition: outline 300ms ease-in;\n\n  &:hover,\n  &:focus {\n    outline-color: #f5b05c;\n  }\n  `;\n\nexport const Button = styled.button`\n  display: inline-block;\n  min-width: 150px;\n  margin-top: 24px;\n  padding: 8px 10px;\n\n  border: 2px solid #a75f06;\n  border-radius: 8px;\n  background-color: #e6f4f1;\n\n  font-size: 18px;\n  font-weight: 500;\n\n  cursor: pointer;\n\n  transition: border-color 300ms ease-in, background-color 300ms ease-in;\n  \n  :hover,\n  :focus {\n    border-color: #f5b05c;\n    background-color: #C0C0C0;\n  }\n  `;","import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nNotify.init({\n  borderRadius: '10px',\n  timeout: 4000,\n  clickToClose: true,\n  cssAnimationStyle: 'zoom',\n});\n\nexport const notifyAddContacts = name => Notify.success(`${name} has been successfully added to the contact list`);\n\nexport const notifyCheckContacts = name => Notify.info(`${name} is already in contacts`);\n\nexport const notifyDeleteContact = () => Notify.success(\"Contact deleted successfully!\");\n","import React, { useState } from 'react';\nimport { Form, Label, Input, Button } from \"./ContactForm.styled\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { notifyAddContacts, notifyCheckContacts } from 'services/notify';\nimport { addContact } from 'redux/contacts/contactsThunk';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())) return notifyCheckContacts(name);\n    \n    dispatch(addContact({ name, number }));\n    notifyAddContacts(name);\n    reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[A-Za-z\\u0080-\\uFFFF ']+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"Enter contact name\"\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"^(\\+?[0-9.\\(\\)\\-\\s]*)$\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"Enter contact number\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  gap: 8px;\n\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n\n  @media screen and (min-width: 768px) {\n    &:not(:last-child) {\n      margin-bottom: 0;\n    }\n  }\n`;\n\nexport const Contact = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  max-width: 140px;\n\n  @media screen and (min-width: 376px) {\n    max-width: 300px;\n  }\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    gap: 8px;\n    max-width: 600px;\n  }\n  `;\n\nexport const Name = styled.p`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #000;\n  line-height: calc(24 / 18);\n  `;\n\nexport const Phone = styled.p`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #000;\n  line-height: calc(24 / 18);\n  `;\n\nexport const Button = styled.button`\n  display: inline-block;\n  margin-bottom: 8px;\n\n\n  border: 2px solid #a75f06;\n  border-radius: 8px;\n  background-color: #e6f4f1;\n\n  font-size: 18px;\n  font-weight: 500;\n\n  cursor: pointer;\n\n  transition: border-color 300ms ease-in, background-color 300ms ease-in;\n  \n  :hover,\n  :focus {\n    border-color: #f5b05c;\n    background-color: #C0C0C0;\n  }\n  `;\n  ","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/contactsThunk';\nimport { notifyDeleteContact } from 'services/notify';\nimport { Item, Button, Contact, Phone, Name } from './ContactListItem.styled';\n\nconst ContactListItem = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filterByName = filter => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  };\n\n  const normalizedFilter = filter.toLowerCase();\n  const filtredContacts = filterByName(normalizedFilter);\n\n  const onDelete = (id) => {\n    dispatch(deleteContact(id));\n    notifyDeleteContact();\n  };\n\n  return filtredContacts.sort((a, b) => a.name.localeCompare(b.name)).map(({ id, name, phone }) => {\n    return (\n      <Item key={id}>\n        <Contact>\n          <Name>{name}:</Name>\n          <Phone>{phone}</Phone>\n        </Contact>\n        <Button type=\"button\" onClick={() => onDelete(id)}>\n          Delete\n        </Button>\n      </Item>\n    );\n  });\n};\n\nexport default ContactListItem;","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  max-height: 60vh;\n  min-height: 200px;\n  padding: 8px 12px;\n\n  list-style: none;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 1.14;\n  overflow: auto;\n\n  border: 2px solid #a75f06;\n  border-radius: 8px;\n  outline: 2px solid transparent;\n  outline-offset: -1px;\n  background-color: #e6f4f1;\n\n  transition: outline 300ms ease-in;\n\n  &:hover,\n  &:focus {\n    outline-color: #f5b05c;\n  }\n\n  &::-webkit-scrollbar {\n    width: 0;\n  }\n  `;","import React from 'react';\nimport ContactListItem from \"components/ContactListItem/ContactListItem\";\nimport { List } from \"./ContactList.styled\";\n\nconst ContactList = () => {\n  return (\n    <List>\n      <ContactListItem />\n    </List>\n  );\n};\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n\n  font-size: 18px;\n  font-weight: 500;\n  line-height: 1.14;\n  `;\n\nexport const FilterInput = styled.input`\n  margin: 4px 0 20px 0;\n  padding: 8px 12px;\n\n  font-size: 18px;\n  line-height: 1.12;\n  \n  border: 2px solid #a75f06;\n  border-radius: 8px;\n  outline: 2px solid transparent;\n  outline-offset: -1px;\n  background-color: #e6f4f1;\n\n  transition: outline 300ms ease-in;\n\n  &:hover,\n  &:focus {\n    outline-color: #f5b05c;\n  }\n\n  @media screen and (min-width: 1024px) {\n    margin-bottom: 0;\n  }\n  `;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { updateFilter } from 'redux/contacts/filterSlise';\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n  const handleChange = ({ target: { value } }) => {\n    dispatch(updateFilter(value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filterValue.filter}\n        onChange={handleChange}\n        pattern=\"^[A-Za-z\\u0080-\\uFFFF ']+$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        placeholder=\"Enter contact name\"\n        required\n      />\n    </FilterLabel>\n  );\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__WzsIr\",\"title\":\"Contacts_title__LxdN4\",\"titleContacts\":\"Contacts_titleContacts__XggQ5\",\"textInfo\":\"Contacts_textInfo__piFWs\"};","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/contactsThunk\";\nimport { selectContacts, selectError, selectIsLoading } from \"redux/contacts/selectors\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport Loader from \"components/Loader/Loader\";\nimport css from './Contacts.module.css';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <div className={css.container}>\n      {error ? (\n        <h2>{error}</h2>\n      ) : (\n        <>\n          <h1 className={css.title}>Phonebook</h1>\n          <ContactForm />\n          {isLoading && !error && <Loader />}\n          {contacts.length ? (\n            <>\n              <h2 className={css.titleContacts}>Contacts</h2>\n              <Filter />\n              <ContactList />\n            </>\n          ) : (\n            <p className={css.textInfo}>No any contacts</p>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;"],"names":["selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectError","error","Form","styled","Label","Input","Button","Notify","borderRadius","timeout","clickToClose","cssAnimationStyle","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","onSubmit","preventDefault","some","contact","toLowerCase","notifyCheckContacts","addContact","notifyAddContacts","type","onChange","pattern","title","placeholder","required","Item","Contact","Name","Phone","filtredContacts","includes","filterByName","onDelete","id","deleteContact","sort","a","b","localeCompare","map","phone","onClick","List","FilterLabel","FilterInput","filterValue","target","updateFilter","useEffect","fetchContacts","className","css","Loader","length"],"sourceRoot":""}